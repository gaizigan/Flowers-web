#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="gaizigan_5")]
public partial class FlowersDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCity(City instance);
  partial void UpdateCity(City instance);
  partial void DeleteCity(City instance);
  partial void InsertCityGroup(CityGroup instance);
  partial void UpdateCityGroup(CityGroup instance);
  partial void DeleteCityGroup(CityGroup instance);
  partial void InsertGroup(Group instance);
  partial void UpdateGroup(Group instance);
  partial void DeleteGroup(Group instance);
  partial void InsertImage(Image instance);
  partial void UpdateImage(Image instance);
  partial void DeleteImage(Image instance);
  partial void InsertItem(Item instance);
  partial void UpdateItem(Item instance);
  partial void DeleteItem(Item instance);
  partial void InsertOrderedItem(OrderedItem instance);
  partial void UpdateOrderedItem(OrderedItem instance);
  partial void DeleteOrderedItem(OrderedItem instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertStore(Store instance);
  partial void UpdateStore(Store instance);
  partial void DeleteStore(Store instance);
  #endregion
	
	public FlowersDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["gaizigan_5ConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public FlowersDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FlowersDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FlowersDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FlowersDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<City> Cities
	{
		get
		{
			return this.GetTable<City>();
		}
	}
	
	public System.Data.Linq.Table<CityGroup> CityGroups
	{
		get
		{
			return this.GetTable<CityGroup>();
		}
	}
	
	public System.Data.Linq.Table<Group> Groups
	{
		get
		{
			return this.GetTable<Group>();
		}
	}
	
	public System.Data.Linq.Table<Image> Images
	{
		get
		{
			return this.GetTable<Image>();
		}
	}
	
	public System.Data.Linq.Table<Item> Items
	{
		get
		{
			return this.GetTable<Item>();
		}
	}
	
	public System.Data.Linq.Table<OrderedItem> OrderedItems
	{
		get
		{
			return this.GetTable<OrderedItem>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<Store> Stores
	{
		get
		{
			return this.GetTable<Store>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private string _localizedName;
	
	private EntitySet<CityGroup> _CityGroups;
	
	private EntitySet<Store> _Stores;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlocalizedNameChanging(string value);
    partial void OnlocalizedNameChanged();
    #endregion
	
	public City()
	{
		this._CityGroups = new EntitySet<CityGroup>(new Action<CityGroup>(this.attach_CityGroups), new Action<CityGroup>(this.detach_CityGroups));
		this._Stores = new EntitySet<Store>(new Action<Store>(this.attach_Stores), new Action<Store>(this.detach_Stores));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_localizedName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string localizedName
	{
		get
		{
			return this._localizedName;
		}
		set
		{
			if ((this._localizedName != value))
			{
				this.OnlocalizedNameChanging(value);
				this.SendPropertyChanging();
				this._localizedName = value;
				this.SendPropertyChanged("localizedName");
				this.OnlocalizedNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_CityGroup", Storage="_CityGroups", ThisKey="id", OtherKey="city")]
	public EntitySet<CityGroup> CityGroups
	{
		get
		{
			return this._CityGroups;
		}
		set
		{
			this._CityGroups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Store", Storage="_Stores", ThisKey="id", OtherKey="city")]
	public EntitySet<Store> Stores
	{
		get
		{
			return this._Stores;
		}
		set
		{
			this._Stores.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CityGroups(CityGroup entity)
	{
		this.SendPropertyChanging();
		entity.City1 = this;
	}
	
	private void detach_CityGroups(CityGroup entity)
	{
		this.SendPropertyChanging();
		entity.City1 = null;
	}
	
	private void attach_Stores(Store entity)
	{
		this.SendPropertyChanging();
		entity.City1 = this;
	}
	
	private void detach_Stores(Store entity)
	{
		this.SendPropertyChanging();
		entity.City1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CityGroup")]
public partial class CityGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.Nullable<int> _city;
	
	private System.Nullable<int> _groups;
	
	private EntityRef<City> _City1;
	
	private EntityRef<Group> _Group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncityChanging(System.Nullable<int> value);
    partial void OncityChanged();
    partial void OngroupsChanging(System.Nullable<int> value);
    partial void OngroupsChanged();
    #endregion
	
	public CityGroup()
	{
		this._City1 = default(EntityRef<City>);
		this._Group = default(EntityRef<Group>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="Int")]
	public System.Nullable<int> city
	{
		get
		{
			return this._city;
		}
		set
		{
			if ((this._city != value))
			{
				if (this._City1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OncityChanging(value);
				this.SendPropertyChanging();
				this._city = value;
				this.SendPropertyChanged("city");
				this.OncityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groups", DbType="Int")]
	public System.Nullable<int> groups
	{
		get
		{
			return this._groups;
		}
		set
		{
			if ((this._groups != value))
			{
				if (this._Group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OngroupsChanging(value);
				this.SendPropertyChanging();
				this._groups = value;
				this.SendPropertyChanged("groups");
				this.OngroupsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_CityGroup", Storage="_City1", ThisKey="city", OtherKey="id", IsForeignKey=true)]
	public City City1
	{
		get
		{
			return this._City1.Entity;
		}
		set
		{
			City previousValue = this._City1.Entity;
			if (((previousValue != value) 
						|| (this._City1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._City1.Entity = null;
					previousValue.CityGroups.Remove(this);
				}
				this._City1.Entity = value;
				if ((value != null))
				{
					value.CityGroups.Add(this);
					this._city = value.id;
				}
				else
				{
					this._city = default(Nullable<int>);
				}
				this.SendPropertyChanged("City1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_CityGroup", Storage="_Group", ThisKey="groups", OtherKey="id", IsForeignKey=true)]
	public Group Group
	{
		get
		{
			return this._Group.Entity;
		}
		set
		{
			Group previousValue = this._Group.Entity;
			if (((previousValue != value) 
						|| (this._Group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group.Entity = null;
					previousValue.CityGroups.Remove(this);
				}
				this._Group.Entity = value;
				if ((value != null))
				{
					value.CityGroups.Add(this);
					this._groups = value.id;
				}
				else
				{
					this._groups = default(Nullable<int>);
				}
				this.SendPropertyChanged("Group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private string _localizedName;
	
	private EntitySet<CityGroup> _CityGroups;
	
	private EntitySet<Item> _Items;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlocalizedNameChanging(string value);
    partial void OnlocalizedNameChanged();
    #endregion
	
	public Group()
	{
		this._CityGroups = new EntitySet<CityGroup>(new Action<CityGroup>(this.attach_CityGroups), new Action<CityGroup>(this.detach_CityGroups));
		this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_localizedName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string localizedName
	{
		get
		{
			return this._localizedName;
		}
		set
		{
			if ((this._localizedName != value))
			{
				this.OnlocalizedNameChanging(value);
				this.SendPropertyChanging();
				this._localizedName = value;
				this.SendPropertyChanged("localizedName");
				this.OnlocalizedNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_CityGroup", Storage="_CityGroups", ThisKey="id", OtherKey="groups")]
	public EntitySet<CityGroup> CityGroups
	{
		get
		{
			return this._CityGroups;
		}
		set
		{
			this._CityGroups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Item", Storage="_Items", ThisKey="id", OtherKey="groups")]
	public EntitySet<Item> Items
	{
		get
		{
			return this._Items;
		}
		set
		{
			this._Items.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CityGroups(CityGroup entity)
	{
		this.SendPropertyChanging();
		entity.Group = this;
	}
	
	private void detach_CityGroups(CityGroup entity)
	{
		this.SendPropertyChanging();
		entity.Group = null;
	}
	
	private void attach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Group = this;
	}
	
	private void detach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Group = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Image")]
public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _fileName;
	
	private int _item;
	
	private EntityRef<Item> _Item1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfileNameChanging(string value);
    partial void OnfileNameChanged();
    partial void OnitemChanging(int value);
    partial void OnitemChanged();
    #endregion
	
	public Image()
	{
		this._Item1 = default(EntityRef<Item>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string fileName
	{
		get
		{
			return this._fileName;
		}
		set
		{
			if ((this._fileName != value))
			{
				this.OnfileNameChanging(value);
				this.SendPropertyChanging();
				this._fileName = value;
				this.SendPropertyChanged("fileName");
				this.OnfileNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item", DbType="Int NOT NULL")]
	public int item
	{
		get
		{
			return this._item;
		}
		set
		{
			if ((this._item != value))
			{
				if (this._Item1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnitemChanging(value);
				this.SendPropertyChanging();
				this._item = value;
				this.SendPropertyChanged("item");
				this.OnitemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Image", Storage="_Item1", ThisKey="item", OtherKey="id", IsForeignKey=true)]
	public Item Item1
	{
		get
		{
			return this._Item1.Entity;
		}
		set
		{
			Item previousValue = this._Item1.Entity;
			if (((previousValue != value) 
						|| (this._Item1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item1.Entity = null;
					previousValue.Images.Remove(this);
				}
				this._Item1.Entity = value;
				if ((value != null))
				{
					value.Images.Add(this);
					this._item = value.id;
				}
				else
				{
					this._item = default(int);
				}
				this.SendPropertyChanged("Item1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.Nullable<int> _rating;
	
	private double _price;
	
	private string _name;
	
	private int _groups;
	
	private int _store;
	
	private System.Nullable<decimal> _ratingCount;
	
	private System.Nullable<int> _article;
	
	private EntitySet<Image> _Images;
	
	private EntitySet<OrderedItem> _OrderedItems;
	
	private EntityRef<Group> _Group;
	
	private EntityRef<Store> _Store1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnratingChanging(System.Nullable<int> value);
    partial void OnratingChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OngroupsChanging(int value);
    partial void OngroupsChanged();
    partial void OnstoreChanging(int value);
    partial void OnstoreChanged();
    partial void OnratingCountChanging(System.Nullable<decimal> value);
    partial void OnratingCountChanged();
    partial void OnarticleChanging(System.Nullable<int> value);
    partial void OnarticleChanged();
    #endregion
	
	public Item()
	{
		this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
		this._OrderedItems = new EntitySet<OrderedItem>(new Action<OrderedItem>(this.attach_OrderedItems), new Action<OrderedItem>(this.detach_OrderedItems));
		this._Group = default(EntityRef<Group>);
		this._Store1 = default(EntityRef<Store>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rating", DbType="Int")]
	public System.Nullable<int> rating
	{
		get
		{
			return this._rating;
		}
		set
		{
			if ((this._rating != value))
			{
				this.OnratingChanging(value);
				this.SendPropertyChanging();
				this._rating = value;
				this.SendPropertyChanged("rating");
				this.OnratingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
	public double price
	{
		get
		{
			return this._price;
		}
		set
		{
			if ((this._price != value))
			{
				this.OnpriceChanging(value);
				this.SendPropertyChanging();
				this._price = value;
				this.SendPropertyChanged("price");
				this.OnpriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groups", DbType="Int NOT NULL")]
	public int groups
	{
		get
		{
			return this._groups;
		}
		set
		{
			if ((this._groups != value))
			{
				if (this._Group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OngroupsChanging(value);
				this.SendPropertyChanging();
				this._groups = value;
				this.SendPropertyChanged("groups");
				this.OngroupsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_store", DbType="Int NOT NULL")]
	public int store
	{
		get
		{
			return this._store;
		}
		set
		{
			if ((this._store != value))
			{
				if (this._Store1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnstoreChanging(value);
				this.SendPropertyChanging();
				this._store = value;
				this.SendPropertyChanged("store");
				this.OnstoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ratingCount", DbType="Decimal(18,0)")]
	public System.Nullable<decimal> ratingCount
	{
		get
		{
			return this._ratingCount;
		}
		set
		{
			if ((this._ratingCount != value))
			{
				this.OnratingCountChanging(value);
				this.SendPropertyChanging();
				this._ratingCount = value;
				this.SendPropertyChanged("ratingCount");
				this.OnratingCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article", DbType="Int")]
	public System.Nullable<int> article
	{
		get
		{
			return this._article;
		}
		set
		{
			if ((this._article != value))
			{
				this.OnarticleChanging(value);
				this.SendPropertyChanging();
				this._article = value;
				this.SendPropertyChanged("article");
				this.OnarticleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Image", Storage="_Images", ThisKey="id", OtherKey="item")]
	public EntitySet<Image> Images
	{
		get
		{
			return this._Images;
		}
		set
		{
			this._Images.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_OrderedItem", Storage="_OrderedItems", ThisKey="id", OtherKey="item")]
	public EntitySet<OrderedItem> OrderedItems
	{
		get
		{
			return this._OrderedItems;
		}
		set
		{
			this._OrderedItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Item", Storage="_Group", ThisKey="groups", OtherKey="id", IsForeignKey=true)]
	public Group Group
	{
		get
		{
			return this._Group.Entity;
		}
		set
		{
			Group previousValue = this._Group.Entity;
			if (((previousValue != value) 
						|| (this._Group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group.Entity = null;
					previousValue.Items.Remove(this);
				}
				this._Group.Entity = value;
				if ((value != null))
				{
					value.Items.Add(this);
					this._groups = value.id;
				}
				else
				{
					this._groups = default(int);
				}
				this.SendPropertyChanged("Group");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Item", Storage="_Store1", ThisKey="store", OtherKey="id", IsForeignKey=true)]
	public Store Store1
	{
		get
		{
			return this._Store1.Entity;
		}
		set
		{
			Store previousValue = this._Store1.Entity;
			if (((previousValue != value) 
						|| (this._Store1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Store1.Entity = null;
					previousValue.Items.Remove(this);
				}
				this._Store1.Entity = value;
				if ((value != null))
				{
					value.Items.Add(this);
					this._store = value.id;
				}
				else
				{
					this._store = default(int);
				}
				this.SendPropertyChanged("Store1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Images(Image entity)
	{
		this.SendPropertyChanging();
		entity.Item1 = this;
	}
	
	private void detach_Images(Image entity)
	{
		this.SendPropertyChanging();
		entity.Item1 = null;
	}
	
	private void attach_OrderedItems(OrderedItem entity)
	{
		this.SendPropertyChanging();
		entity.Item1 = this;
	}
	
	private void detach_OrderedItems(OrderedItem entity)
	{
		this.SendPropertyChanging();
		entity.Item1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderedItem")]
public partial class OrderedItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _counts;
	
	private int _item;
	
	private int _orders;
	
	private EntityRef<Item> _Item1;
	
	private EntityRef<Order> _Order;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncountsChanging(int value);
    partial void OncountsChanged();
    partial void OnitemChanging(int value);
    partial void OnitemChanged();
    partial void OnordersChanging(int value);
    partial void OnordersChanged();
    #endregion
	
	public OrderedItem()
	{
		this._Item1 = default(EntityRef<Item>);
		this._Order = default(EntityRef<Order>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_counts", DbType="Int NOT NULL")]
	public int counts
	{
		get
		{
			return this._counts;
		}
		set
		{
			if ((this._counts != value))
			{
				this.OncountsChanging(value);
				this.SendPropertyChanging();
				this._counts = value;
				this.SendPropertyChanged("counts");
				this.OncountsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item", DbType="Int NOT NULL")]
	public int item
	{
		get
		{
			return this._item;
		}
		set
		{
			if ((this._item != value))
			{
				if (this._Item1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnitemChanging(value);
				this.SendPropertyChanging();
				this._item = value;
				this.SendPropertyChanged("item");
				this.OnitemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orders", DbType="Int NOT NULL")]
	public int orders
	{
		get
		{
			return this._orders;
		}
		set
		{
			if ((this._orders != value))
			{
				if (this._Order.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnordersChanging(value);
				this.SendPropertyChanging();
				this._orders = value;
				this.SendPropertyChanged("orders");
				this.OnordersChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_OrderedItem", Storage="_Item1", ThisKey="item", OtherKey="id", IsForeignKey=true)]
	public Item Item1
	{
		get
		{
			return this._Item1.Entity;
		}
		set
		{
			Item previousValue = this._Item1.Entity;
			if (((previousValue != value) 
						|| (this._Item1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item1.Entity = null;
					previousValue.OrderedItems.Remove(this);
				}
				this._Item1.Entity = value;
				if ((value != null))
				{
					value.OrderedItems.Add(this);
					this._item = value.id;
				}
				else
				{
					this._item = default(int);
				}
				this.SendPropertyChanged("Item1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderedItem", Storage="_Order", ThisKey="orders", OtherKey="id", IsForeignKey=true)]
	public Order Order
	{
		get
		{
			return this._Order.Entity;
		}
		set
		{
			Order previousValue = this._Order.Entity;
			if (((previousValue != value) 
						|| (this._Order.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order.Entity = null;
					previousValue.OrderedItems.Remove(this);
				}
				this._Order.Entity = value;
				if ((value != null))
				{
					value.OrderedItems.Add(this);
					this._orders = value.id;
				}
				else
				{
					this._orders = default(int);
				}
				this.SendPropertyChanged("Order");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private decimal _buyerPhone;
	
	private string _destination;
	
	private System.DateTime _deliveringTimeTo;
	
	private int _store;
	
	private System.Nullable<bool> _isDelivered;
	
	private string _comments;
	
	private EntitySet<OrderedItem> _OrderedItems;
	
	private EntityRef<Store> _Store1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnbuyerPhoneChanging(decimal value);
    partial void OnbuyerPhoneChanged();
    partial void OndestinationChanging(string value);
    partial void OndestinationChanged();
    partial void OndeliveringTimeToChanging(System.DateTime value);
    partial void OndeliveringTimeToChanged();
    partial void OnstoreChanging(int value);
    partial void OnstoreChanged();
    partial void OnisDeliveredChanging(System.Nullable<bool> value);
    partial void OnisDeliveredChanged();
    partial void OncommentsChanging(string value);
    partial void OncommentsChanged();
    #endregion
	
	public Order()
	{
		this._OrderedItems = new EntitySet<OrderedItem>(new Action<OrderedItem>(this.attach_OrderedItems), new Action<OrderedItem>(this.detach_OrderedItems));
		this._Store1 = default(EntityRef<Store>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buyerPhone", DbType="Decimal(18,0) NOT NULL")]
	public decimal buyerPhone
	{
		get
		{
			return this._buyerPhone;
		}
		set
		{
			if ((this._buyerPhone != value))
			{
				this.OnbuyerPhoneChanging(value);
				this.SendPropertyChanging();
				this._buyerPhone = value;
				this.SendPropertyChanged("buyerPhone");
				this.OnbuyerPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_destination", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string destination
	{
		get
		{
			return this._destination;
		}
		set
		{
			if ((this._destination != value))
			{
				this.OndestinationChanging(value);
				this.SendPropertyChanging();
				this._destination = value;
				this.SendPropertyChanged("destination");
				this.OndestinationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deliveringTimeTo", DbType="DateTime NOT NULL")]
	public System.DateTime deliveringTimeTo
	{
		get
		{
			return this._deliveringTimeTo;
		}
		set
		{
			if ((this._deliveringTimeTo != value))
			{
				this.OndeliveringTimeToChanging(value);
				this.SendPropertyChanging();
				this._deliveringTimeTo = value;
				this.SendPropertyChanged("deliveringTimeTo");
				this.OndeliveringTimeToChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_store", DbType="Int NOT NULL")]
	public int store
	{
		get
		{
			return this._store;
		}
		set
		{
			if ((this._store != value))
			{
				if (this._Store1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnstoreChanging(value);
				this.SendPropertyChanging();
				this._store = value;
				this.SendPropertyChanged("store");
				this.OnstoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDelivered", DbType="Bit")]
	public System.Nullable<bool> isDelivered
	{
		get
		{
			return this._isDelivered;
		}
		set
		{
			if ((this._isDelivered != value))
			{
				this.OnisDeliveredChanging(value);
				this.SendPropertyChanging();
				this._isDelivered = value;
				this.SendPropertyChanged("isDelivered");
				this.OnisDeliveredChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comments", DbType="VarChar(MAX)")]
	public string comments
	{
		get
		{
			return this._comments;
		}
		set
		{
			if ((this._comments != value))
			{
				this.OncommentsChanging(value);
				this.SendPropertyChanging();
				this._comments = value;
				this.SendPropertyChanged("comments");
				this.OncommentsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderedItem", Storage="_OrderedItems", ThisKey="id", OtherKey="orders")]
	public EntitySet<OrderedItem> OrderedItems
	{
		get
		{
			return this._OrderedItems;
		}
		set
		{
			this._OrderedItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Order", Storage="_Store1", ThisKey="store", OtherKey="id", IsForeignKey=true)]
	public Store Store1
	{
		get
		{
			return this._Store1.Entity;
		}
		set
		{
			Store previousValue = this._Store1.Entity;
			if (((previousValue != value) 
						|| (this._Store1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Store1.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._Store1.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._store = value.id;
				}
				else
				{
					this._store = default(int);
				}
				this.SendPropertyChanged("Store1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OrderedItems(OrderedItem entity)
	{
		this.SendPropertyChanging();
		entity.Order = this;
	}
	
	private void detach_OrderedItems(OrderedItem entity)
	{
		this.SendPropertyChanging();
		entity.Order = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Store")]
public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.Nullable<decimal> _phone;
	
	private string _address;
	
	private string _name;
	
	private int _city;
	
	private System.Nullable<int> _deliveryCost;
	
	private EntitySet<Item> _Items;
	
	private EntitySet<Order> _Orders;
	
	private EntityRef<City> _City1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnphoneChanging(System.Nullable<decimal> value);
    partial void OnphoneChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncityChanging(int value);
    partial void OncityChanged();
    partial void OndeliveryCostChanging(System.Nullable<int> value);
    partial void OndeliveryCostChanged();
    #endregion
	
	public Store()
	{
		this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._City1 = default(EntityRef<City>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Decimal(18,0)")]
	public System.Nullable<decimal> phone
	{
		get
		{
			return this._phone;
		}
		set
		{
			if ((this._phone != value))
			{
				this.OnphoneChanging(value);
				this.SendPropertyChanging();
				this._phone = value;
				this.SendPropertyChanged("phone");
				this.OnphoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(MAX)")]
	public string address
	{
		get
		{
			return this._address;
		}
		set
		{
			if ((this._address != value))
			{
				this.OnaddressChanging(value);
				this.SendPropertyChanging();
				this._address = value;
				this.SendPropertyChanged("address");
				this.OnaddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="Int NOT NULL")]
	public int city
	{
		get
		{
			return this._city;
		}
		set
		{
			if ((this._city != value))
			{
				if (this._City1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OncityChanging(value);
				this.SendPropertyChanging();
				this._city = value;
				this.SendPropertyChanged("city");
				this.OncityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deliveryCost", DbType="Int")]
	public System.Nullable<int> deliveryCost
	{
		get
		{
			return this._deliveryCost;
		}
		set
		{
			if ((this._deliveryCost != value))
			{
				this.OndeliveryCostChanging(value);
				this.SendPropertyChanging();
				this._deliveryCost = value;
				this.SendPropertyChanged("deliveryCost");
				this.OndeliveryCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Item", Storage="_Items", ThisKey="id", OtherKey="store")]
	public EntitySet<Item> Items
	{
		get
		{
			return this._Items;
		}
		set
		{
			this._Items.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Order", Storage="_Orders", ThisKey="id", OtherKey="store")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Store", Storage="_City1", ThisKey="city", OtherKey="id", IsForeignKey=true)]
	public City City1
	{
		get
		{
			return this._City1.Entity;
		}
		set
		{
			City previousValue = this._City1.Entity;
			if (((previousValue != value) 
						|| (this._City1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._City1.Entity = null;
					previousValue.Stores.Remove(this);
				}
				this._City1.Entity = value;
				if ((value != null))
				{
					value.Stores.Add(this);
					this._city = value.id;
				}
				else
				{
					this._city = default(int);
				}
				this.SendPropertyChanged("City1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Store1 = this;
	}
	
	private void detach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Store1 = null;
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Store1 = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Store1 = null;
	}
}
#pragma warning restore 1591
